generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum Gender {
  male
  female
  other
}

enum BodyType {
  ectomorph
  mesomorph
  endomorph
  unknown
}

enum TrainingGoal {
  weight_loss
  muscle_gain
  endurance
  general_health
  mobility
  flexibility
  mixed
  unknown
}

enum FitnessLevel {
  beginner
  intermediate
  advanced
}

enum PhysicalActivityLevel {
  very_low
  low
  medium
  high
  very_high
}

enum SleepQuality {
  poor
  average
  good
  excellent
}

enum StressLevel {
  very_low
  low
  medium
  high
  very_high
}

enum MedicalCondition {
  heart_conditions
  diabetes
  hypertension
  asthma
  joint_issues
  back_pain
  knee_pain
  shoulder_pain
  other
}

enum FoodPreference {
  vegan
  vegetarian
  pescatarian
  omnivore
  paleo
  keto
  other
}

enum FoodAllergy {
  nuts
  dairy
  gluten
  soy
  eggs
  shellfish
  fish
  other
}

enum TrainingPlace {
  home
  gym
  outdoor
}

enum TrainingDays {
  one
  two
  three
  four
  five
  six
  seven
}

enum MealFrequency {
  two
  three
  four
  five
  six
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  name      String?
  createdAt DateTime  @map("created_at")@default(now())
  updatedAt DateTime  @map("updated_at")@updatedAt

  age               Int?
  height            Int? @map("heightCm")
  weight            Float? @map("weightKg")
  gender            Gender?
  bodyType          BodyType?
  trainingGoal      TrainingGoal?
  fitnessLevel      FitnessLevel?
  physicalActivity  PhysicalActivityLevel?
  sleepQuality      SleepQuality?
  stressLevel       StressLevel?
  medicalConditions MedicalCondition[]
  foodPreferences   FoodPreference[]
  foodAllergies     FoodAllergy[]
  country           String?                @db.VarChar(128)

  generatedPlans  GeneratedPlan[]
  sportsHabits    SportsHabitsReport[]
  eatingHabits    EatingHabitsReport[]
  exerciseHistory ExerciseHistory[]

  // DB lentelė yra "users", todėl mapinam tik šį modelį
  @@map("users")
}

model GeneratedPlan {
  id     String @id @default(uuid())
  userId String

  // Tikroji tavo DB struktūra
  type             String
  planData         Json
  userComment      String?
  difficultyRating Int?
  wasCompleted     Boolean @default(false)
  completionStatus Json?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user              User              @relation(fields: [userId], references: [id])
  exerciseHistories ExerciseHistory[]
}

model SportsHabitsReport {
  id        String   @id @default(uuid())
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  reportJson Json

  user User @relation(fields: [userId], references: [id])
}

model EatingHabitsReport {
  id        String   @id @default(uuid())
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  reportJson Json

  user User @relation(fields: [userId], references: [id])
}

model ExerciseHistory {
  id           String   @id @default(uuid())
  userId       String
  planId       String
  workoutDate  DateTime @default(now())
  exerciseName String
  muscleGroups String[]
  difficulty   String
  userRating   Int?
  comment      String?
  createdAt    DateTime @default(now())

  user User          @relation(fields: [userId], references: [id])
  plan GeneratedPlan @relation(fields: [planId], references: [id])
}
